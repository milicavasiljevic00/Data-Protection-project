//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.CryptoService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CryptoService.ICryptoService")]
    public interface ICryptoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A51_EncryptBytes", ReplyAction="http://tempuri.org/ICryptoService/A51_EncryptBytesResponse")]
        byte[] A51_EncryptBytes(byte[] bytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A51_EncryptBytes", ReplyAction="http://tempuri.org/ICryptoService/A51_EncryptBytesResponse")]
        System.Threading.Tasks.Task<byte[]> A51_EncryptBytesAsync(byte[] bytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A51_DecryptBytes", ReplyAction="http://tempuri.org/ICryptoService/A51_DecryptBytesResponse")]
        string A51_DecryptBytes(byte[] bytes1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/A51_DecryptBytes", ReplyAction="http://tempuri.org/ICryptoService/A51_DecryptBytesResponse")]
        System.Threading.Tasks.Task<string> A51_DecryptBytesAsync(byte[] bytes1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/shiftRight", ReplyAction="http://tempuri.org/ICryptoService/shiftRightResponse")]
        System.Collections.BitArray shiftRight(System.Collections.BitArray registerArray, System.Collections.BitArray b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/shiftRight", ReplyAction="http://tempuri.org/ICryptoService/shiftRightResponse")]
        System.Threading.Tasks.Task<System.Collections.BitArray> shiftRightAsync(System.Collections.BitArray registerArray, System.Collections.BitArray b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/majority_vote", ReplyAction="http://tempuri.org/ICryptoService/majority_voteResponse")]
        bool majority_vote(System.Collections.BitArray b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/majority_vote", ReplyAction="http://tempuri.org/ICryptoService/majority_voteResponse")]
        System.Threading.Tasks.Task<bool> majority_voteAsync(System.Collections.BitArray b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSA_Encrypt", ReplyAction="http://tempuri.org/ICryptoService/RSA_EncryptResponse")]
        int[] RSA_Encrypt(byte[] inputBytes, int p, int q);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSA_Encrypt", ReplyAction="http://tempuri.org/ICryptoService/RSA_EncryptResponse")]
        System.Threading.Tasks.Task<int[]> RSA_EncryptAsync(byte[] inputBytes, int p, int q);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSA_Decrypt", ReplyAction="http://tempuri.org/ICryptoService/RSA_DecryptResponse")]
        string RSA_Decrypt(int[] plainText, int p, int q);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RSA_Decrypt", ReplyAction="http://tempuri.org/ICryptoService/RSA_DecryptResponse")]
        System.Threading.Tasks.Task<string> RSA_DecryptAsync(int[] plainText, int p, int q);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/GeneratePublicKey", ReplyAction="http://tempuri.org/ICryptoService/GeneratePublicKeyResponse")]
        int GeneratePublicKey(int phi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/GeneratePublicKey", ReplyAction="http://tempuri.org/ICryptoService/GeneratePublicKeyResponse")]
        System.Threading.Tasks.Task<int> GeneratePublicKeyAsync(int phi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/GCD", ReplyAction="http://tempuri.org/ICryptoService/GCDResponse")]
        int GCD(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/GCD", ReplyAction="http://tempuri.org/ICryptoService/GCDResponse")]
        System.Threading.Tasks.Task<int> GCDAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/CFB_Encrypt", ReplyAction="http://tempuri.org/ICryptoService/CFB_EncryptResponse")]
        byte[] CFB_Encrypt(string plainText, string IV);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/CFB_Encrypt", ReplyAction="http://tempuri.org/ICryptoService/CFB_EncryptResponse")]
        System.Threading.Tasks.Task<byte[]> CFB_EncryptAsync(string plainText, string IV);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/CFB_Decrypt", ReplyAction="http://tempuri.org/ICryptoService/CFB_DecryptResponse")]
        string CFB_Decrypt(byte[] plainTextNew1, string IV);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/CFB_Decrypt", ReplyAction="http://tempuri.org/ICryptoService/CFB_DecryptResponse")]
        System.Threading.Tasks.Task<string> CFB_DecryptAsync(byte[] plainTextNew1, string IV);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Mod", ReplyAction="http://tempuri.org/ICryptoService/ModResponse")]
        int Mod(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Mod", ReplyAction="http://tempuri.org/ICryptoService/ModResponse")]
        System.Threading.Tasks.Task<int> ModAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/FindAllOccurrences", ReplyAction="http://tempuri.org/ICryptoService/FindAllOccurrencesResponse")]
        int[] FindAllOccurrences(string str, char value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/FindAllOccurrences", ReplyAction="http://tempuri.org/ICryptoService/FindAllOccurrencesResponse")]
        System.Threading.Tasks.Task<int[]> FindAllOccurrencesAsync(string str, char value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RemoveAllDuplicates", ReplyAction="http://tempuri.org/ICryptoService/RemoveAllDuplicatesResponse")]
        string RemoveAllDuplicates(string str, int[] indexes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RemoveAllDuplicates", ReplyAction="http://tempuri.org/ICryptoService/RemoveAllDuplicatesResponse")]
        System.Threading.Tasks.Task<string> RemoveAllDuplicatesAsync(string str, int[] indexes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RemoveOtherChars", ReplyAction="http://tempuri.org/ICryptoService/RemoveOtherCharsResponse")]
        string RemoveOtherChars(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RemoveOtherChars", ReplyAction="http://tempuri.org/ICryptoService/RemoveOtherCharsResponse")]
        System.Threading.Tasks.Task<string> RemoveOtherCharsAsync(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/AdjustOutput", ReplyAction="http://tempuri.org/ICryptoService/AdjustOutputResponse")]
        string AdjustOutput(string input, string output);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/AdjustOutput", ReplyAction="http://tempuri.org/ICryptoService/AdjustOutputResponse")]
        System.Threading.Tasks.Task<string> AdjustOutputAsync(string input, string output);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Cipher", ReplyAction="http://tempuri.org/ICryptoService/CipherResponse")]
        string Cipher(string input, string key, bool encipher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Cipher", ReplyAction="http://tempuri.org/ICryptoService/CipherResponse")]
        System.Threading.Tasks.Task<string> CipherAsync(string input, string key, bool encipher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/PlayFair_Encrypt", ReplyAction="http://tempuri.org/ICryptoService/PlayFair_EncryptResponse")]
        string PlayFair_Encrypt(string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/PlayFair_Encrypt", ReplyAction="http://tempuri.org/ICryptoService/PlayFair_EncryptResponse")]
        System.Threading.Tasks.Task<string> PlayFair_EncryptAsync(string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/PlayFair_Decrypt", ReplyAction="http://tempuri.org/ICryptoService/PlayFair_DecryptResponse")]
        string PlayFair_Decrypt(string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/PlayFair_Decrypt", ReplyAction="http://tempuri.org/ICryptoService/PlayFair_DecryptResponse")]
        System.Threading.Tasks.Task<string> PlayFair_DecryptAsync(string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/PlayFair_EncryptParallel", ReplyAction="http://tempuri.org/ICryptoService/PlayFair_EncryptParallelResponse")]
        void PlayFair_EncryptParallel(string inputFile, string outputFile, int threadCount, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/PlayFair_EncryptParallel", ReplyAction="http://tempuri.org/ICryptoService/PlayFair_EncryptParallelResponse")]
        System.Threading.Tasks.Task PlayFair_EncryptParallelAsync(string inputFile, string outputFile, int threadCount, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/WriteBlocksToFile", ReplyAction="http://tempuri.org/ICryptoService/WriteBlocksToFileResponse")]
        void WriteBlocksToFile(string file, string[] blocks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/WriteBlocksToFile", ReplyAction="http://tempuri.org/ICryptoService/WriteBlocksToFileResponse")]
        System.Threading.Tasks.Task WriteBlocksToFileAsync(string file, string[] blocks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/SHA2Hash", ReplyAction="http://tempuri.org/ICryptoService/SHA2HashResponse")]
        string SHA2Hash(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/SHA2Hash", ReplyAction="http://tempuri.org/ICryptoService/SHA2HashResponse")]
        System.Threading.Tasks.Task<string> SHA2HashAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/loadBytes", ReplyAction="http://tempuri.org/ICryptoService/loadBytesResponse")]
        byte[] loadBytes(string fileString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/loadBytes", ReplyAction="http://tempuri.org/ICryptoService/loadBytesResponse")]
        System.Threading.Tasks.Task<byte[]> loadBytesAsync(string fileString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/saveBytes", ReplyAction="http://tempuri.org/ICryptoService/saveBytesResponse")]
        void saveBytes(byte[] bytes, string fileString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/saveBytes", ReplyAction="http://tempuri.org/ICryptoService/saveBytesResponse")]
        System.Threading.Tasks.Task saveBytesAsync(byte[] bytes, string fileString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/saveText", ReplyAction="http://tempuri.org/ICryptoService/saveTextResponse")]
        void saveText(string text, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/saveText", ReplyAction="http://tempuri.org/ICryptoService/saveTextResponse")]
        System.Threading.Tasks.Task saveTextAsync(string text, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/readText", ReplyAction="http://tempuri.org/ICryptoService/readTextResponse")]
        string readText(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/readText", ReplyAction="http://tempuri.org/ICryptoService/readTextResponse")]
        System.Threading.Tasks.Task<string> readTextAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/writeToFileInt", ReplyAction="http://tempuri.org/ICryptoService/writeToFileIntResponse")]
        void writeToFileInt(string path, int[] arr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/writeToFileInt", ReplyAction="http://tempuri.org/ICryptoService/writeToFileIntResponse")]
        System.Threading.Tasks.Task writeToFileIntAsync(string path, int[] arr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/readFromFileInt", ReplyAction="http://tempuri.org/ICryptoService/readFromFileIntResponse")]
        int[] readFromFileInt(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/readFromFileInt", ReplyAction="http://tempuri.org/ICryptoService/readFromFileIntResponse")]
        System.Threading.Tasks.Task<int[]> readFromFileIntAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/loadBitmap", ReplyAction="http://tempuri.org/ICryptoService/loadBitmapResponse")]
        byte[] loadBitmap(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/loadBitmap", ReplyAction="http://tempuri.org/ICryptoService/loadBitmapResponse")]
        System.Threading.Tasks.Task<byte[]> loadBitmapAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/saveBitmap", ReplyAction="http://tempuri.org/ICryptoService/saveBitmapResponse")]
        void saveBitmap(byte[] slikaBajtovi, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/saveBitmap", ReplyAction="http://tempuri.org/ICryptoService/saveBitmapResponse")]
        System.Threading.Tasks.Task saveBitmapAsync(byte[] slikaBajtovi, string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICryptoServiceChannel : Client.CryptoService.ICryptoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CryptoServiceClient : System.ServiceModel.ClientBase<Client.CryptoService.ICryptoService>, Client.CryptoService.ICryptoService {
        
        public CryptoServiceClient() {
        }
        
        public CryptoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CryptoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] A51_EncryptBytes(byte[] bytes) {
            return base.Channel.A51_EncryptBytes(bytes);
        }
        
        public System.Threading.Tasks.Task<byte[]> A51_EncryptBytesAsync(byte[] bytes) {
            return base.Channel.A51_EncryptBytesAsync(bytes);
        }
        
        public string A51_DecryptBytes(byte[] bytes1) {
            return base.Channel.A51_DecryptBytes(bytes1);
        }
        
        public System.Threading.Tasks.Task<string> A51_DecryptBytesAsync(byte[] bytes1) {
            return base.Channel.A51_DecryptBytesAsync(bytes1);
        }
        
        public System.Collections.BitArray shiftRight(System.Collections.BitArray registerArray, System.Collections.BitArray b) {
            return base.Channel.shiftRight(registerArray, b);
        }
        
        public System.Threading.Tasks.Task<System.Collections.BitArray> shiftRightAsync(System.Collections.BitArray registerArray, System.Collections.BitArray b) {
            return base.Channel.shiftRightAsync(registerArray, b);
        }
        
        public bool majority_vote(System.Collections.BitArray b) {
            return base.Channel.majority_vote(b);
        }
        
        public System.Threading.Tasks.Task<bool> majority_voteAsync(System.Collections.BitArray b) {
            return base.Channel.majority_voteAsync(b);
        }
        
        public int[] RSA_Encrypt(byte[] inputBytes, int p, int q) {
            return base.Channel.RSA_Encrypt(inputBytes, p, q);
        }
        
        public System.Threading.Tasks.Task<int[]> RSA_EncryptAsync(byte[] inputBytes, int p, int q) {
            return base.Channel.RSA_EncryptAsync(inputBytes, p, q);
        }
        
        public string RSA_Decrypt(int[] plainText, int p, int q) {
            return base.Channel.RSA_Decrypt(plainText, p, q);
        }
        
        public System.Threading.Tasks.Task<string> RSA_DecryptAsync(int[] plainText, int p, int q) {
            return base.Channel.RSA_DecryptAsync(plainText, p, q);
        }
        
        public int GeneratePublicKey(int phi) {
            return base.Channel.GeneratePublicKey(phi);
        }
        
        public System.Threading.Tasks.Task<int> GeneratePublicKeyAsync(int phi) {
            return base.Channel.GeneratePublicKeyAsync(phi);
        }
        
        public int GCD(int x, int y) {
            return base.Channel.GCD(x, y);
        }
        
        public System.Threading.Tasks.Task<int> GCDAsync(int x, int y) {
            return base.Channel.GCDAsync(x, y);
        }
        
        public byte[] CFB_Encrypt(string plainText, string IV) {
            return base.Channel.CFB_Encrypt(plainText, IV);
        }
        
        public System.Threading.Tasks.Task<byte[]> CFB_EncryptAsync(string plainText, string IV) {
            return base.Channel.CFB_EncryptAsync(plainText, IV);
        }
        
        public string CFB_Decrypt(byte[] plainTextNew1, string IV) {
            return base.Channel.CFB_Decrypt(plainTextNew1, IV);
        }
        
        public System.Threading.Tasks.Task<string> CFB_DecryptAsync(byte[] plainTextNew1, string IV) {
            return base.Channel.CFB_DecryptAsync(plainTextNew1, IV);
        }
        
        public int Mod(int a, int b) {
            return base.Channel.Mod(a, b);
        }
        
        public System.Threading.Tasks.Task<int> ModAsync(int a, int b) {
            return base.Channel.ModAsync(a, b);
        }
        
        public int[] FindAllOccurrences(string str, char value) {
            return base.Channel.FindAllOccurrences(str, value);
        }
        
        public System.Threading.Tasks.Task<int[]> FindAllOccurrencesAsync(string str, char value) {
            return base.Channel.FindAllOccurrencesAsync(str, value);
        }
        
        public string RemoveAllDuplicates(string str, int[] indexes) {
            return base.Channel.RemoveAllDuplicates(str, indexes);
        }
        
        public System.Threading.Tasks.Task<string> RemoveAllDuplicatesAsync(string str, int[] indexes) {
            return base.Channel.RemoveAllDuplicatesAsync(str, indexes);
        }
        
        public string RemoveOtherChars(string input) {
            return base.Channel.RemoveOtherChars(input);
        }
        
        public System.Threading.Tasks.Task<string> RemoveOtherCharsAsync(string input) {
            return base.Channel.RemoveOtherCharsAsync(input);
        }
        
        public string AdjustOutput(string input, string output) {
            return base.Channel.AdjustOutput(input, output);
        }
        
        public System.Threading.Tasks.Task<string> AdjustOutputAsync(string input, string output) {
            return base.Channel.AdjustOutputAsync(input, output);
        }
        
        public string Cipher(string input, string key, bool encipher) {
            return base.Channel.Cipher(input, key, encipher);
        }
        
        public System.Threading.Tasks.Task<string> CipherAsync(string input, string key, bool encipher) {
            return base.Channel.CipherAsync(input, key, encipher);
        }
        
        public string PlayFair_Encrypt(string input, string key) {
            return base.Channel.PlayFair_Encrypt(input, key);
        }
        
        public System.Threading.Tasks.Task<string> PlayFair_EncryptAsync(string input, string key) {
            return base.Channel.PlayFair_EncryptAsync(input, key);
        }
        
        public string PlayFair_Decrypt(string input, string key) {
            return base.Channel.PlayFair_Decrypt(input, key);
        }
        
        public System.Threading.Tasks.Task<string> PlayFair_DecryptAsync(string input, string key) {
            return base.Channel.PlayFair_DecryptAsync(input, key);
        }
        
        public void PlayFair_EncryptParallel(string inputFile, string outputFile, int threadCount, string key) {
            base.Channel.PlayFair_EncryptParallel(inputFile, outputFile, threadCount, key);
        }
        
        public System.Threading.Tasks.Task PlayFair_EncryptParallelAsync(string inputFile, string outputFile, int threadCount, string key) {
            return base.Channel.PlayFair_EncryptParallelAsync(inputFile, outputFile, threadCount, key);
        }
        
        public void WriteBlocksToFile(string file, string[] blocks) {
            base.Channel.WriteBlocksToFile(file, blocks);
        }
        
        public System.Threading.Tasks.Task WriteBlocksToFileAsync(string file, string[] blocks) {
            return base.Channel.WriteBlocksToFileAsync(file, blocks);
        }
        
        public string SHA2Hash(string text) {
            return base.Channel.SHA2Hash(text);
        }
        
        public System.Threading.Tasks.Task<string> SHA2HashAsync(string text) {
            return base.Channel.SHA2HashAsync(text);
        }
        
        public byte[] loadBytes(string fileString) {
            return base.Channel.loadBytes(fileString);
        }
        
        public System.Threading.Tasks.Task<byte[]> loadBytesAsync(string fileString) {
            return base.Channel.loadBytesAsync(fileString);
        }
        
        public void saveBytes(byte[] bytes, string fileString) {
            base.Channel.saveBytes(bytes, fileString);
        }
        
        public System.Threading.Tasks.Task saveBytesAsync(byte[] bytes, string fileString) {
            return base.Channel.saveBytesAsync(bytes, fileString);
        }
        
        public void saveText(string text, string path) {
            base.Channel.saveText(text, path);
        }
        
        public System.Threading.Tasks.Task saveTextAsync(string text, string path) {
            return base.Channel.saveTextAsync(text, path);
        }
        
        public string readText(string path) {
            return base.Channel.readText(path);
        }
        
        public System.Threading.Tasks.Task<string> readTextAsync(string path) {
            return base.Channel.readTextAsync(path);
        }
        
        public void writeToFileInt(string path, int[] arr) {
            base.Channel.writeToFileInt(path, arr);
        }
        
        public System.Threading.Tasks.Task writeToFileIntAsync(string path, int[] arr) {
            return base.Channel.writeToFileIntAsync(path, arr);
        }
        
        public int[] readFromFileInt(string path) {
            return base.Channel.readFromFileInt(path);
        }
        
        public System.Threading.Tasks.Task<int[]> readFromFileIntAsync(string path) {
            return base.Channel.readFromFileIntAsync(path);
        }
        
        public byte[] loadBitmap(string fileName) {
            return base.Channel.loadBitmap(fileName);
        }
        
        public System.Threading.Tasks.Task<byte[]> loadBitmapAsync(string fileName) {
            return base.Channel.loadBitmapAsync(fileName);
        }
        
        public void saveBitmap(byte[] slikaBajtovi, string fileName) {
            base.Channel.saveBitmap(slikaBajtovi, fileName);
        }
        
        public System.Threading.Tasks.Task saveBitmapAsync(byte[] slikaBajtovi, string fileName) {
            return base.Channel.saveBitmapAsync(slikaBajtovi, fileName);
        }
    }
}
